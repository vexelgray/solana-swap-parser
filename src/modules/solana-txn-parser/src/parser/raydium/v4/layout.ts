import { struct, u8, blob } from '@solana/buffer-layout';
import { pubKey, uint64, uint128 } from '../../../core/layout';
import { InitPool, Deposit, Withdraw, SwapBaseIn, SwapBaseOut, PoolInfo } from './types';

export const INIT_POOL_LAYOUT = struct<InitPool>([
    uint64('timestamp'),
    u8('quoteDecimals'),
    u8('baseDecimals'),
    uint64('quoteLotSize'),
    uint64('baseLotSize'),
    uint64('quoteAmountIn'),
    uint64('baseAmountIn'),
    pubKey('marketId'),
]);

export const DEPOSIT_LAYOUT = struct<Deposit>([
    uint64('maxBaseAmount'),
    uint64('maxQuoteAmount'),
    uint64('fixedSide'),
    uint64('baseReserve'),
    uint64('quoteReserve'),
    uint64('poolLpAmount'),
    uint128('pnlX'),
    uint128('pnlY'),
    uint64('baseAmountIn'),
    uint64('quoteAmountIn'),
    uint64('mintedLpAmount'),
]);

export const WITHDRAW_LAYOUT = struct<Withdraw>([
    uint64('withdrawLpAmount'),
    uint64('userLpAmount'),
    uint64('baseReserve'),
    uint64('quoteReserve'),
    uint64('poolLpAmount'),
    uint128('pnlX'),
    uint128('pnlY'),
    uint64('baseAmountOut'),
    uint64('quoteAmountOut'),
]);

export const SWAP_BASE_IN_LAYOUT = struct<SwapBaseIn>([
    uint64('amountIn'),
    uint64('minimumAmountOut'),
    uint64('direction'),
    uint64('userSource'),
    uint64('baseReserve'),
    uint64('quoteReserve'),
    uint64('amountOut'),
]);

export const SWAP_BASE_OUT_LAYOUT = struct<SwapBaseOut>([
    uint64('maxAmountIn'),
    uint64('amountOut'),
    uint64('direction'),
    uint64('userSource'),
    uint64('baseReserve'),
    uint64('quoteReserve'),
    uint64('amountIn'),
]);

export const RAY_AMM_V4_POOL_LAYOUT = struct<PoolInfo & { padding: Uint8Array }>([
    uint64('status'),
    uint64('nonce'),
    uint64('maxOrder'),
    uint64('depth'),
    uint64('baseDecimal'),
    uint64('quoteDecimal'),
    uint64('state'),
    uint64('resetFlag'),
    uint64('minSize'),
    uint64('volMaxCutRatio'),
    uint64('amountWaveRatio'),
    uint64('baseLotSize'),
    uint64('quoteLotSize'),
    uint64('minPriceMultiplier'),
    uint64('maxPriceMultiplier'),
    uint64('systemDecimalValue'),
    uint64('minSeparateNumerator'),
    uint64('minSeparateDenominator'),
    uint64('tradeFeeNumerator'),
    uint64('tradeFeeDenominator'),
    uint64('pnlNumerator'),
    uint64('pnlDenominator'),
    uint64('swapFeeNumerator'),
    uint64('swapFeeDenominator'),
    uint64('baseNeedTakePnl'),
    uint64('quoteNeedTakePnl'),
    uint64('quoteTotalPnl'),
    uint64('baseTotalPnl'),
    uint64('poolOpenTime'),
    uint64('punishPcAmount'),
    uint64('punishCoinAmount'),
    uint64('orderbookToInitTime'),
    uint128('swapBaseInAmount'),
    uint128('swapQuoteOutAmount'),
    uint64('swapBase2QuoteFee'),
    uint128('swapQuoteInAmount'),
    uint128('swapBaseOutAmount'),
    uint64('swapQuote2BaseFee'),
    pubKey('baseVault'),
    pubKey('quoteVault'),
    pubKey('baseMint'),
    pubKey('quoteMint'),
    pubKey('lpMint'),
    pubKey('openOrders'),
    pubKey('marketId'),
    pubKey('marketProgramId'),
    pubKey('targetOrders'),
    pubKey('withdrawQueue'),
    pubKey('lpVault'),
    pubKey('owner'),
    uint64('lpReserve'),
    blob(24, 'padding'),
]);
